{"ast":null,"code":"var _jsxFileName = \"/Users/majdhailat/Documents/Developer/NNN/Frontend/my-app/src/components/Register.jsx\";\nimport React from \"react\";\n\nfunction Register(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, \"Hello \", fullName.fName, \" \", fullName.lName), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: fullName.fName,\n    onChange: handleChange,\n    name: \"fName\",\n    placeholder: \"First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: fullName.lName,\n    onChange: handleChange,\n    name: \"lName\",\n    placeholder: \"Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}\n\nexport default Register; // import React, { useState } from \"react\";\n//\n// function App() {\n//   const [fullName, setFullName] = useState({\n//     fName: \"\",\n//     lName: \"\"\n//   });\n//\n//   function handleChange(event) {\n//     const { value, name } = event.target;\n//     setFullName((previousValue) => {\n//       if (name === \"fName\") {\n//         return {\n//           fName: value,\n//           lName: previousValue.lName\n//         };\n//       } else if (name === \"lName\") {\n//         return {\n//           fName: previousValue.fName,\n//           lName: value\n//         };\n//       }\n//     });\n//   }","map":{"version":3,"sources":["/Users/majdhailat/Documents/Developer/NNN/Frontend/my-app/src/components/Register.jsx"],"names":["React","Register","props","fullName","fName","lName","handleChange"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSC,QAAQ,CAACC,KADlB,OAC0BD,QAAQ,CAACE,KADnC,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAEF,QAAQ,CAACC,KADlB;AAEE,IAAA,QAAQ,EAAEE,YAFZ;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AACE,IAAA,KAAK,EAAEH,QAAQ,CAACE,KADlB;AAEE,IAAA,QAAQ,EAAEC,YAFZ;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CAJF,CADF;AAsBD;;AAED,eAAeL,QAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\n\nfunction Register(props) {\n  return (\n    <div className=\"container\">\n      <h1>\n        Hello {fullName.fName} {fullName.lName}\n      </h1>\n      <form>\n        <input\n          value={fullName.fName}\n          onChange={handleChange}\n          name=\"fName\"\n          placeholder=\"First Name\"\n        />\n        <input\n          value={fullName.lName}\n          onChange={handleChange}\n          name=\"lName\"\n          placeholder=\"Last Name\"\n        />\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Register;\n\n\n\n// import React, { useState } from \"react\";\n//\n// function App() {\n//   const [fullName, setFullName] = useState({\n//     fName: \"\",\n//     lName: \"\"\n//   });\n//\n//   function handleChange(event) {\n//     const { value, name } = event.target;\n//     setFullName((previousValue) => {\n//       if (name === \"fName\") {\n//         return {\n//           fName: value,\n//           lName: previousValue.lName\n//         };\n//       } else if (name === \"lName\") {\n//         return {\n//           fName: previousValue.fName,\n//           lName: value\n//         };\n//       }\n//     });\n//   }\n"]},"metadata":{},"sourceType":"module"}